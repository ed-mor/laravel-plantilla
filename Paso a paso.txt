Paso a paso de la Plantilla
---------------------------

1)	Instalación del paquete del idioma español para Jetstream.

	composer require amendozaaguiar/laraveles-spanish-for-jetstream

2)	Actualizamos las traducciones.

	php artisan vendor:publish --tag=lang

3)	Luego en el config/app.php

	'locale'          => 'es',

4)	Cambiando el logo de las pantallas de Autenticación.

	El logo es renderizado por el componente 'Login.vue', a
	través de su componente hijo: 'AuthenticationCardLogo.vue'.

	El 'Login.vue' recibe una 'props' con el nombre 'logo', el cual
	le pasamos a través de: En el archivo: 'FortifyServiceProvider.php'
	en el método 'boot', le agregamos lo siguiente:

        Fortify::loginView(function () {
            return Inertia::render('Auth/Login', [
                'canResetPassword' => Route::has('password.request'),
                'status' => session('status'),
                'logo' => config(system.app:logo)
            ]);
        });

    Aquí le pasamos un string con el path del logo de la aplicación.

    Pero que sucede? en otras ventanas no estará disponible ese String que 
    nos aporta el path/name del ícono. Entonces recurrimos a 'Shared data' 
    (Datos compartidos) de inertiaJs que permite datos compartidos para todos 
    los componentes VUE de la aplicación.

    Para que esté disponible para todos los componentes de VUE, Compartimos 
    esos datos en el archivo: HandleInertiaRequests.php

	    public function share(Request $request)
	    {
	        return array_merge(parent::share($request), [
	            // Logo de la aplicación
	            'logo' => config('system.app_logo'),
	        ]);
	    }    


5)	El ícono de la aplicación.

	La Aplicación renderiza un index.html (resorces/views/app.blade.php) como base para los componentes VUE, la cual en su comportamiento normal busca un archivo 'public/favicon.ico', 
	para renderizar el ícono en el navegador.

	Pero, podemos cambiar ese comportamiento editando ese archivo.

    {{-- ícono de la página --}}
    <link rel="shortcut icon" href=" {{config('system.app_icon')}} " />
    Utilizamos el helpper config, para traer datos del array de configuración del sistema
    que es devuelto por el archivo 'config/system.php'

6)	Instalción del paquete SPATIE para controlar Roles y Permisos.

	composer require spatie/laravel-permission

	Documentación completa en: https://spatie.be/docs/laravel-permission/v3/installation-laravel


7)	Creación de los seeders y factories

8)	Instalación del Remember Query String (Para restaurar las cadenas de consulta)

	composer require reinink/remember-query-strings

	CONFIGURACIÓN: 

	Primero registre el middleware de ruta en su App\HttpKernelclase:

	protected $routeMiddleware = [
	    // ..
	    'remember' => \Reinink\RememberQueryStrings::class,
	];

	USO:

		Route::get('users')->name('users')->uses('UsersController@index')->middleware('remember');

9)	Sobre-escribir el siguiente método en el modelo 'App/Models/User.php' para poder recuperar 
	usuarios anteriormente eliminados con SoftDelete.

	    public function resolveRouteBinding($value, $field = null)
	    {
	        return in_array(SoftDeletes::class, class_uses($this))
	            ? $this->where($this->getRouteKeyName(), $value)->withTrashed()->first()
	            : parent::resolveRouteBinding($value);
	    }

10)	Instalamos el plugins '@tailwindcss/forms' para agregar el componente de vue-tailwind (TToggle)

		npm install vue-tailwind --save
		npm install @tailwindcss/forms

	Importamos y Configuramos los (vue-tailwind) en el 'recources/app.js'

		import VueTailwind from 'vue-tailwind' 
		Vue.use(VueTailwind, components)

		o  Instalar los componentes que se necesitan nada mas...

11)	Instalamos Intervention Image para manipular las imágenes que se almacenan en el servidor.

	composer require intervention/image 

	Luego en el array de proveedores 'config/app.php' agregamos:

		Intervention\Image\ImageServiceProvider::class

	Luego agregamos el alias

		'Image' => Intervention\Image\Facades\Image::class

	Luego publicamos el archivo de configuración

		php artisan vendor:publish --provider="Intervention\Image\ImageServiceProviderLaravelRecent"

12)	Instalamos Sweet Alert 2,  para mejorar los mensajes.

		npm install -S vue-sweetalert2

	Luego en el 'resources/app.js' agrego:

		import VueSweetalert2 from 'vue-sweetalert2';
		import 'sweetalert2/dist/sweetalert2.min.css';
		Vue.use(VueSweetalert2);